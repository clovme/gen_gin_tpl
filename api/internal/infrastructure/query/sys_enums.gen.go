// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gen_gin_tpl/internal/models"
)

func newEnums(db *gorm.DB, opts ...gen.DOOption) enums {
	_enums := enums{}

	_enums.enumsDo.UseDB(db, opts...)
	_enums.enumsDo.UseModel(&models.Enums{})

	tableName := _enums.enumsDo.TableName()
	_enums.ALL = field.NewAsterisk(tableName)
	_enums.ID = field.NewInt64(tableName, "id")
	_enums.Category = field.NewString(tableName, "category")
	_enums.Key = field.NewString(tableName, "key")
	_enums.Name = field.NewString(tableName, "name")
	_enums.Value = field.NewInt(tableName, "value")
	_enums.ValueT = field.NewInt(tableName, "value_t")
	_enums.Sort = field.NewInt(tableName, "sort")
	_enums.Status = field.NewInt(tableName, "status")
	_enums.Description = field.NewString(tableName, "description")
	_enums.CreatedAt = field.NewTime(tableName, "created_at")
	_enums.UpdatedAt = field.NewTime(tableName, "updated_at")
	_enums.DeletedAt = field.NewField(tableName, "deleted_at")

	_enums.fillFieldMap()

	return _enums
}

type enums struct {
	enumsDo

	ALL         field.Asterisk
	ID          field.Int64  // 枚举项ID，主键
	Category    field.String // 枚举分类
	Key         field.String // 枚举键（唯一标识）
	Name        field.String // 枚举名称（显示用）
	Value       field.Int    // 枚举值（数字）
	ValueT      field.Int    // 值类型
	Sort        field.Int    // 排序
	Status      field.Int    // 状态
	Description field.String // 描述
	CreatedAt   field.Time   // 创建时间
	UpdatedAt   field.Time   // 更新时间
	DeletedAt   field.Field  // 软删除标记，空值表示未删除

	fieldMap map[string]field.Expr
}

func (e enums) Table(newTableName string) *enums {
	e.enumsDo.UseTable(newTableName)
	return e.updateTableName(newTableName)
}

func (e enums) As(alias string) *enums {
	e.enumsDo.DO = *(e.enumsDo.As(alias).(*gen.DO))
	return e.updateTableName(alias)
}

func (e *enums) updateTableName(table string) *enums {
	e.ALL = field.NewAsterisk(table)
	e.ID = field.NewInt64(table, "id")
	e.Category = field.NewString(table, "category")
	e.Key = field.NewString(table, "key")
	e.Name = field.NewString(table, "name")
	e.Value = field.NewInt(table, "value")
	e.ValueT = field.NewInt(table, "value_t")
	e.Sort = field.NewInt(table, "sort")
	e.Status = field.NewInt(table, "status")
	e.Description = field.NewString(table, "description")
	e.CreatedAt = field.NewTime(table, "created_at")
	e.UpdatedAt = field.NewTime(table, "updated_at")
	e.DeletedAt = field.NewField(table, "deleted_at")

	e.fillFieldMap()

	return e
}

func (e *enums) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := e.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (e *enums) fillFieldMap() {
	e.fieldMap = make(map[string]field.Expr, 12)
	e.fieldMap["id"] = e.ID
	e.fieldMap["category"] = e.Category
	e.fieldMap["key"] = e.Key
	e.fieldMap["name"] = e.Name
	e.fieldMap["value"] = e.Value
	e.fieldMap["value_t"] = e.ValueT
	e.fieldMap["sort"] = e.Sort
	e.fieldMap["status"] = e.Status
	e.fieldMap["description"] = e.Description
	e.fieldMap["created_at"] = e.CreatedAt
	e.fieldMap["updated_at"] = e.UpdatedAt
	e.fieldMap["deleted_at"] = e.DeletedAt
}

func (e enums) clone(db *gorm.DB) enums {
	e.enumsDo.ReplaceConnPool(db.Statement.ConnPool)
	return e
}

func (e enums) replaceDB(db *gorm.DB) enums {
	e.enumsDo.ReplaceDB(db)
	return e
}

type enumsDo struct{ gen.DO }

func (e enumsDo) Debug() *enumsDo {
	return e.withDO(e.DO.Debug())
}

func (e enumsDo) WithContext(ctx context.Context) *enumsDo {
	return e.withDO(e.DO.WithContext(ctx))
}

func (e enumsDo) ReadDB() *enumsDo {
	return e.Clauses(dbresolver.Read)
}

func (e enumsDo) WriteDB() *enumsDo {
	return e.Clauses(dbresolver.Write)
}

func (e enumsDo) Session(config *gorm.Session) *enumsDo {
	return e.withDO(e.DO.Session(config))
}

func (e enumsDo) Clauses(conds ...clause.Expression) *enumsDo {
	return e.withDO(e.DO.Clauses(conds...))
}

func (e enumsDo) Returning(value interface{}, columns ...string) *enumsDo {
	return e.withDO(e.DO.Returning(value, columns...))
}

func (e enumsDo) Not(conds ...gen.Condition) *enumsDo {
	return e.withDO(e.DO.Not(conds...))
}

func (e enumsDo) Or(conds ...gen.Condition) *enumsDo {
	return e.withDO(e.DO.Or(conds...))
}

func (e enumsDo) Select(conds ...field.Expr) *enumsDo {
	return e.withDO(e.DO.Select(conds...))
}

func (e enumsDo) Where(conds ...gen.Condition) *enumsDo {
	return e.withDO(e.DO.Where(conds...))
}

func (e enumsDo) Order(conds ...field.Expr) *enumsDo {
	return e.withDO(e.DO.Order(conds...))
}

func (e enumsDo) Distinct(cols ...field.Expr) *enumsDo {
	return e.withDO(e.DO.Distinct(cols...))
}

func (e enumsDo) Omit(cols ...field.Expr) *enumsDo {
	return e.withDO(e.DO.Omit(cols...))
}

func (e enumsDo) Join(table schema.Tabler, on ...field.Expr) *enumsDo {
	return e.withDO(e.DO.Join(table, on...))
}

func (e enumsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *enumsDo {
	return e.withDO(e.DO.LeftJoin(table, on...))
}

func (e enumsDo) RightJoin(table schema.Tabler, on ...field.Expr) *enumsDo {
	return e.withDO(e.DO.RightJoin(table, on...))
}

func (e enumsDo) Group(cols ...field.Expr) *enumsDo {
	return e.withDO(e.DO.Group(cols...))
}

func (e enumsDo) Having(conds ...gen.Condition) *enumsDo {
	return e.withDO(e.DO.Having(conds...))
}

func (e enumsDo) Limit(limit int) *enumsDo {
	return e.withDO(e.DO.Limit(limit))
}

func (e enumsDo) Offset(offset int) *enumsDo {
	return e.withDO(e.DO.Offset(offset))
}

func (e enumsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *enumsDo {
	return e.withDO(e.DO.Scopes(funcs...))
}

func (e enumsDo) Unscoped() *enumsDo {
	return e.withDO(e.DO.Unscoped())
}

func (e enumsDo) Create(values ...*models.Enums) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Create(values)
}

func (e enumsDo) CreateInBatches(values []*models.Enums, batchSize int) error {
	return e.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (e enumsDo) Save(values ...*models.Enums) error {
	if len(values) == 0 {
		return nil
	}
	return e.DO.Save(values)
}

func (e enumsDo) First() (*models.Enums, error) {
	if result, err := e.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*models.Enums), nil
	}
}

func (e enumsDo) Take() (*models.Enums, error) {
	if result, err := e.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*models.Enums), nil
	}
}

func (e enumsDo) Last() (*models.Enums, error) {
	if result, err := e.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*models.Enums), nil
	}
}

func (e enumsDo) Find() ([]*models.Enums, error) {
	result, err := e.DO.Find()
	return result.([]*models.Enums), err
}

func (e enumsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*models.Enums, err error) {
	buf := make([]*models.Enums, 0, batchSize)
	err = e.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (e enumsDo) FindInBatches(result *[]*models.Enums, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return e.DO.FindInBatches(result, batchSize, fc)
}

func (e enumsDo) Attrs(attrs ...field.AssignExpr) *enumsDo {
	return e.withDO(e.DO.Attrs(attrs...))
}

func (e enumsDo) Assign(attrs ...field.AssignExpr) *enumsDo {
	return e.withDO(e.DO.Assign(attrs...))
}

func (e enumsDo) Joins(fields ...field.RelationField) *enumsDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Joins(_f))
	}
	return &e
}

func (e enumsDo) Preload(fields ...field.RelationField) *enumsDo {
	for _, _f := range fields {
		e = *e.withDO(e.DO.Preload(_f))
	}
	return &e
}

func (e enumsDo) FirstOrInit() (*models.Enums, error) {
	if result, err := e.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*models.Enums), nil
	}
}

func (e enumsDo) FirstOrCreate() (*models.Enums, error) {
	if result, err := e.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*models.Enums), nil
	}
}

func (e enumsDo) FindByPage(offset int, limit int) (result []*models.Enums, count int64, err error) {
	result, err = e.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = e.Offset(-1).Limit(-1).Count()
	return
}

func (e enumsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = e.Count()
	if err != nil {
		return
	}

	err = e.Offset(offset).Limit(limit).Scan(result)
	return
}

func (e enumsDo) Scan(result interface{}) (err error) {
	return e.DO.Scan(result)
}

func (e enumsDo) Delete(models ...*models.Enums) (result gen.ResultInfo, err error) {
	return e.DO.Delete(models)
}

func (e *enumsDo) withDO(do gen.Dao) *enumsDo {
	e.DO = *do.(*gen.DO)
	return e
}
