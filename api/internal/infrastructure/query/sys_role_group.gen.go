// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"gen_gin_tpl/internal/models/auth"
)

func newRoleGroup(db *gorm.DB, opts ...gen.DOOption) roleGroup {
	_roleGroup := roleGroup{}

	_roleGroup.roleGroupDo.UseDB(db, opts...)
	_roleGroup.roleGroupDo.UseModel(&auth.RoleGroup{})

	tableName := _roleGroup.roleGroupDo.TableName()
	_roleGroup.ALL = field.NewAsterisk(tableName)
	_roleGroup.ID = field.NewInt64(tableName, "id")
	_roleGroup.Name = field.NewString(tableName, "name")
	_roleGroup.Description = field.NewString(tableName, "description")
	_roleGroup.Status = field.NewInt(tableName, "status")
	_roleGroup.CreatedAt = field.NewTime(tableName, "created_at")
	_roleGroup.UpdatedAt = field.NewTime(tableName, "updated_at")

	_roleGroup.fillFieldMap()

	return _roleGroup
}

type roleGroup struct {
	roleGroupDo

	ALL         field.Asterisk
	ID          field.Int64
	Name        field.String
	Description field.String
	Status      field.Int
	CreatedAt   field.Time
	UpdatedAt   field.Time

	fieldMap map[string]field.Expr
}

func (r roleGroup) Table(newTableName string) *roleGroup {
	r.roleGroupDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roleGroup) As(alias string) *roleGroup {
	r.roleGroupDo.DO = *(r.roleGroupDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roleGroup) updateTableName(table string) *roleGroup {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.Name = field.NewString(table, "name")
	r.Description = field.NewString(table, "description")
	r.Status = field.NewInt(table, "status")
	r.CreatedAt = field.NewTime(table, "created_at")
	r.UpdatedAt = field.NewTime(table, "updated_at")

	r.fillFieldMap()

	return r
}

func (r *roleGroup) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roleGroup) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 6)
	r.fieldMap["id"] = r.ID
	r.fieldMap["name"] = r.Name
	r.fieldMap["description"] = r.Description
	r.fieldMap["status"] = r.Status
	r.fieldMap["created_at"] = r.CreatedAt
	r.fieldMap["updated_at"] = r.UpdatedAt
}

func (r roleGroup) clone(db *gorm.DB) roleGroup {
	r.roleGroupDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r roleGroup) replaceDB(db *gorm.DB) roleGroup {
	r.roleGroupDo.ReplaceDB(db)
	return r
}

type roleGroupDo struct{ gen.DO }

func (r roleGroupDo) Debug() *roleGroupDo {
	return r.withDO(r.DO.Debug())
}

func (r roleGroupDo) WithContext(ctx context.Context) *roleGroupDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roleGroupDo) ReadDB() *roleGroupDo {
	return r.Clauses(dbresolver.Read)
}

func (r roleGroupDo) WriteDB() *roleGroupDo {
	return r.Clauses(dbresolver.Write)
}

func (r roleGroupDo) Session(config *gorm.Session) *roleGroupDo {
	return r.withDO(r.DO.Session(config))
}

func (r roleGroupDo) Clauses(conds ...clause.Expression) *roleGroupDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roleGroupDo) Returning(value interface{}, columns ...string) *roleGroupDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roleGroupDo) Not(conds ...gen.Condition) *roleGroupDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roleGroupDo) Or(conds ...gen.Condition) *roleGroupDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roleGroupDo) Select(conds ...field.Expr) *roleGroupDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roleGroupDo) Where(conds ...gen.Condition) *roleGroupDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roleGroupDo) Order(conds ...field.Expr) *roleGroupDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roleGroupDo) Distinct(cols ...field.Expr) *roleGroupDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roleGroupDo) Omit(cols ...field.Expr) *roleGroupDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roleGroupDo) Join(table schema.Tabler, on ...field.Expr) *roleGroupDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roleGroupDo) LeftJoin(table schema.Tabler, on ...field.Expr) *roleGroupDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roleGroupDo) RightJoin(table schema.Tabler, on ...field.Expr) *roleGroupDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roleGroupDo) Group(cols ...field.Expr) *roleGroupDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roleGroupDo) Having(conds ...gen.Condition) *roleGroupDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roleGroupDo) Limit(limit int) *roleGroupDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roleGroupDo) Offset(offset int) *roleGroupDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roleGroupDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *roleGroupDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roleGroupDo) Unscoped() *roleGroupDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roleGroupDo) Create(values ...*auth.RoleGroup) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roleGroupDo) CreateInBatches(values []*auth.RoleGroup, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roleGroupDo) Save(values ...*auth.RoleGroup) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roleGroupDo) First() (*auth.RoleGroup, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*auth.RoleGroup), nil
	}
}

func (r roleGroupDo) Take() (*auth.RoleGroup, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*auth.RoleGroup), nil
	}
}

func (r roleGroupDo) Last() (*auth.RoleGroup, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*auth.RoleGroup), nil
	}
}

func (r roleGroupDo) Find() ([]*auth.RoleGroup, error) {
	result, err := r.DO.Find()
	return result.([]*auth.RoleGroup), err
}

func (r roleGroupDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*auth.RoleGroup, err error) {
	buf := make([]*auth.RoleGroup, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roleGroupDo) FindInBatches(result *[]*auth.RoleGroup, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roleGroupDo) Attrs(attrs ...field.AssignExpr) *roleGroupDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roleGroupDo) Assign(attrs ...field.AssignExpr) *roleGroupDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roleGroupDo) Joins(fields ...field.RelationField) *roleGroupDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roleGroupDo) Preload(fields ...field.RelationField) *roleGroupDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roleGroupDo) FirstOrInit() (*auth.RoleGroup, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*auth.RoleGroup), nil
	}
}

func (r roleGroupDo) FirstOrCreate() (*auth.RoleGroup, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*auth.RoleGroup), nil
	}
}

func (r roleGroupDo) FindByPage(offset int, limit int) (result []*auth.RoleGroup, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roleGroupDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roleGroupDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roleGroupDo) Delete(models ...*auth.RoleGroup) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roleGroupDo) withDO(do gen.Dao) *roleGroupDo {
	r.DO = *do.(*gen.DO)
	return r
}
