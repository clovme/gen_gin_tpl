// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q              = new(Query)
	Config         *config
	CorsWhitelist  *corsWhitelist
	Enums          *enums
	Permission     *permission
	Role           *role
	RoleGroup      *roleGroup
	RolePermission *rolePermission
	Token          *token
	User           *user
	UserRole       *userRole
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Config = &Q.Config
	CorsWhitelist = &Q.CorsWhitelist
	Enums = &Q.Enums
	Permission = &Q.Permission
	Role = &Q.Role
	RoleGroup = &Q.RoleGroup
	RolePermission = &Q.RolePermission
	Token = &Q.Token
	User = &Q.User
	UserRole = &Q.UserRole
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:             db,
		Config:         newConfig(db, opts...),
		CorsWhitelist:  newCorsWhitelist(db, opts...),
		Enums:          newEnums(db, opts...),
		Permission:     newPermission(db, opts...),
		Role:           newRole(db, opts...),
		RoleGroup:      newRoleGroup(db, opts...),
		RolePermission: newRolePermission(db, opts...),
		Token:          newToken(db, opts...),
		User:           newUser(db, opts...),
		UserRole:       newUserRole(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Config         config
	CorsWhitelist  corsWhitelist
	Enums          enums
	Permission     permission
	Role           role
	RoleGroup      roleGroup
	RolePermission rolePermission
	Token          token
	User           user
	UserRole       userRole
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Config:         q.Config.clone(db),
		CorsWhitelist:  q.CorsWhitelist.clone(db),
		Enums:          q.Enums.clone(db),
		Permission:     q.Permission.clone(db),
		Role:           q.Role.clone(db),
		RoleGroup:      q.RoleGroup.clone(db),
		RolePermission: q.RolePermission.clone(db),
		Token:          q.Token.clone(db),
		User:           q.User.clone(db),
		UserRole:       q.UserRole.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:             db,
		Config:         q.Config.replaceDB(db),
		CorsWhitelist:  q.CorsWhitelist.replaceDB(db),
		Enums:          q.Enums.replaceDB(db),
		Permission:     q.Permission.replaceDB(db),
		Role:           q.Role.replaceDB(db),
		RoleGroup:      q.RoleGroup.replaceDB(db),
		RolePermission: q.RolePermission.replaceDB(db),
		Token:          q.Token.replaceDB(db),
		User:           q.User.replaceDB(db),
		UserRole:       q.UserRole.replaceDB(db),
	}
}

type queryCtx struct {
	Config         *configDo
	CorsWhitelist  *corsWhitelistDo
	Enums          *enumsDo
	Permission     *permissionDo
	Role           *roleDo
	RoleGroup      *roleGroupDo
	RolePermission *rolePermissionDo
	Token          *tokenDo
	User           *userDo
	UserRole       *userRoleDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Config:         q.Config.WithContext(ctx),
		CorsWhitelist:  q.CorsWhitelist.WithContext(ctx),
		Enums:          q.Enums.WithContext(ctx),
		Permission:     q.Permission.WithContext(ctx),
		Role:           q.Role.WithContext(ctx),
		RoleGroup:      q.RoleGroup.WithContext(ctx),
		RolePermission: q.RolePermission.WithContext(ctx),
		Token:          q.Token.WithContext(ctx),
		User:           q.User.WithContext(ctx),
		UserRole:       q.UserRole.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
